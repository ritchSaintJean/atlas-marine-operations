1) Config & Health

Add src/config.ts using Zod to validate: NODE_ENV, DATABASE_URL, SESSION_SECRET, VITE_API_BASE. Crash fast if missing.

Ensure GET /healthz (uptime/commit) and GET /readyz (DB ping) exist.

Vite dev proxy: route /api → backend port. SPA fallback after API routes.

Add .env.example with required keys (no secrets).

2) Database (Drizzle) — migrations + schema

Create migrations + src/db/schema/epm.ts for:

project_stages(id uuid pk, project_id fk, name text, "order" int, required_approver_role text, gate_rules jsonb, created_at, updated_at); index (project_id,"order").

checklist_templates(id pk, name, description, scope text in ('project','stage')).

checklist_template_items(id pk, template_id fk, label text, type text in ('text','number','photo','signature','boolean','select'), required bool, validations jsonb).

project_checklists(id pk, project_id fk, stage_id fk NULL, template_id fk, status text in ('not_started','in_progress','blocked','done')); index (project_id,stage_id).

checklist_items(id pk, project_checklist_id fk, template_item_id fk, value jsonb NULL, status text in ('pending','complete','na','blocked'), assignee_id fk NULL, due_at timestamptz NULL, completed_at timestamptz NULL); index (project_checklist_id,assignee_id).

stage_approvals(id pk, project_id fk, stage_id fk, approver_id fk, status text in ('pending','approved','rejected'), note text, decided_at timestamptz).

audit_logs(id pk, actor_id fk, entity text, entity_id text, action text, before jsonb, after jsonb, at timestamptz default now()).

(Optional) read views v_stage_progress, v_project_progress for % complete (required items only).

3) Contracts (Zod DTOs)

In src/contracts/epm.ts add input/output schemas & types:

Inputs: StageCreate, ChecklistFromTemplate, ChecklistItemPatch, StageApprove.

Outputs: Stage, Checklist, ChecklistItem, ProjectProgress.
Use these types in controllers and React Query.

4) Services (real logic)

Implement src/domain/epm/EpmService.ts class with:

createStages(projectId, stages[]).

listStagesWithPct(projectId) → compute % by required completed.

instantiateChecklist(projectId, templateId, stageId?) → create checklist + items from template.

getChecklist(checklistId) → items grouped (required first).

updateChecklistItem(itemId, patch) → set completed_at on status→complete.

approveStage(projectId, stageId, decision, note?):

Enforce all required items complete before approve.

Drizzle transaction: write stage_approvals, audit_logs.

Fire hooks: idempotent notifications; generate required safety forms from gate_rules.requiredForms[]; inventory reserve on stage start; if commissioning, seed equipment maintenance jobs.

getProjectProgress(projectId) → per-stage % + overall %.
Add RBAC checks: techs can edit own items; supervisors approve; admins can override (must log override in audit_logs).

5) API (Express + Zod)

Add src/routes/epm.routes.ts (thin controllers; call service; validate with Zod):

POST /api/projects/:id/stages

GET /api/projects/:id/stages

POST /api/projects/:id/checklists

GET /api/projects/:id/checklists

GET /api/checklists/:id

PATCH /api/checklist-items/:id

POST /api/projects/:id/stages/:stageId/approve

GET /api/projects/:id/progress

6) UI (mobile-first, shadcn)

/projects/:id: Stage rail (chips Not Started/In Progress/Blocked/Done) + progress bars/ring, button to open a stage.

/projects/:id/stages/:stageId: Checklist view (required items pinned first; optional collapsible), assignee & due date, file/photo upload, inline validation hints, “Ready for Approval” disabled until required complete.

ApprovalDialog: supervisor/admin only; decision + note (signature if a signature item exists).

Use React Query fetchers with import.meta.env.VITE_API_BASE ?? '/api'.

7) Notifications & Hooks (use existing systems)

Publish stage.approval.requested, stage.approved, checklist.blocked with idempotency keys.

Safety forms creation from gate_rules.

Inventory reserve/decrement on stage start/use.

Equipment commissioning seeds on approval.

8) Tests & scripts

Add pnpm smoke that runs:
GET /healthz → 200 → create 3 stages → create checklist → try approve (fail until required done) → complete required items → approve (pass) → GET /api/projects/:id/progress shows stage 100%.

Add unit tests for approve flow (success, missing required, RBAC deny).

Add pnpm seed:staging to create 1 project, 3 stages, 1 checklist template with 5 required + 3 optional items. Guard seeds from running in prod.

9) Security & hardening

CORS allowlist from env.

Helmet headers.

Rate-limit auth + upload routes; validate multipart size/mime.

No secrets or URLs hardcoded; everything via config.ts.

Acceptance: App builds with pnpm dev; pnpm drizzle:migrate applies; UI works on mobile; endpoints function with real logic; pnpm smoke passes; no hardcoded values; env validated at boot.